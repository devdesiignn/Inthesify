import{initializeApp}from"https://www.gstatic.com/firebasejs/10.1.0/firebase-app.js";import{getAuth,onAuthStateChanged,signOut,updateEmail,updatePassword,updateProfile}from"https://www.gstatic.com/firebasejs/10.1.0/firebase-auth.js";import{collection,doc,getDoc,getDocs,setDoc,getFirestore,updateDoc}from"https://www.gstatic.com/firebasejs/10.1.0/firebase-firestore.js";import{getDownloadURL,getStorage,ref as sRef,uploadBytes,uploadBytesResumable}from"https://www.gstatic.com/firebasejs/10.1.0/firebase-storage.js";const firebaseConfig={apiKey:"AIzaSyCoTVeUde0QJeBxMrj5J-6E0Cdwmn2AgjA",authDomain:"inthesify-new.firebaseapp.com",databaseURL:"https://inthesify-new-default-rtdb.firebaseio.com",projectId:"inthesify-new",storageBucket:"inthesify-new.appspot.com",messagingSenderId:"346177356137",appId:"1:346177356137:web:5823438d09c201978ebdf8"},app=initializeApp(firebaseConfig),auth=getAuth(app),db=getFirestore(app),storage=getStorage(app),email=document.querySelector("#email"),fname=document.querySelector("#fullname"),password=document.querySelector("#password"),username=document.querySelector("#username"),profileImageInput=document.querySelector("#profile-image"),emailError=document.querySelector("#invalid-feedback-email"),nameError=document.querySelector("#invalid-feedback-fullname"),passwordError=document.querySelector("#invalid-feedback-password"),usernameError=document.querySelector("#invalid-feedback-username"),nameRegex=/^[a-zA-Z]+\s+[a-zA-Z]+$/,emailRegex=/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/,passwordRegex=/^(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*[!@#$%^&*()\-_=+{}[\]:;'",.<>/?])(?=.{8,})/,usernameRegex=/^[_a-zA-Z0-9]{3,20}$/;function checkAuth(){onAuthStateChanged(auth,e=>{e||signout()})}const sidebarParent=document.querySelector(".nav-sidebar"),contentSections=document.querySelectorAll(".content-section"),navLinks=sidebarParent.querySelectorAll(".nav-link"),profileLink=document.querySelector("#profile-link"),userTag=document.querySelector("#user-role"),userImage=document.querySelector("#user-photo");function showSection(e){contentSections.forEach(t=>{t.style.display=t.id===e?"block":"none"})}function setActiveLink(e){navLinks.forEach(e=>{e.classList.remove("active")}),e.classList.add("active")}function hideLinksBasedOnRole(e){document.querySelectorAll(".user, .admin, .super-admin").forEach(t=>{"User"===e&&t.classList.contains("user")||"Admin"===e&&t.classList.contains("admin")||"Super Admin"===e&&t.classList.contains("super-admin")?t.style.display="block":t.style.display="none"})}async function getUserData(e){const t=collection(db,"UsersList"),r=doc(t,e);try{const e=await getDoc(r);if(e.exists()){return e.data()}return console.log("User document does not exist."),null}catch(e){return console.error("Error fetching user document:",e),null}}sidebarParent.addEventListener("click",e=>{const t=e.target.closest(".nav-link");if(t&&t!==logoutLink){showSection(t.getAttribute("data-section")),setActiveLink(t)}});const savedDetails=localStorage.getItem("user")||sessionStorage.getItem("user"),savedUserInfo=JSON.parse(savedDetails);async function setRoleAndActiveButton(){const e=savedUserInfo.uid,t=await getUserData(e);if(null!==t){const{role:e,username:r,profilePicture:o}=t;hideLinksBasedOnRole(e),userTag.textContent=r.toUpperCase(),userImage.src=o}else console.log("User data not available.")}function validation(){const e=[{inputField:email,regex:emailRegex,errorElement:emailError,errorMessage:"Please enter a valid email address."},{inputField:fname,regex:nameRegex,errorElement:nameError,errorMessage:"Please enter your full name."},{inputField:password,regex:passwordRegex,errorElement:passwordError,errorMessage:"Your password must:<br>- Contain at least one uppercase letter (A-Z)<br>- Contain at least one lowercase letter (a-z)<br>- Include at least one number (0-9)<br>- Include at least one special character<br>- Be at least 8 characters long.<br><br>Please choose a stronger password."},{inputField:username,regex:usernameRegex,errorElement:usernameError,errorMessage:"Invalid username. Must be 3-20 characters long and can only contain letters, digits, and underscores."}];e.forEach(e=>{e.errorElement.textContent=""});let t=!0;return e.forEach(e=>{e.regex.test(e.inputField.value.trim())||(e.errorElement.innerHTML=e.errorMessage,e.errorElement.classList.replace("invalid-feedback","d-block"),t=!1)}),t}window.addEventListener("DOMContentLoaded",()=>{setActiveLink(profileLink),showSection("profile"),setRoleAndActiveButton(),checkAuth(),getTotals().then(({totalUsers:e,totalTheses:t})=>{displayTotalUsers.textContent=e,displayTotalTheses.textContent=t}).catch(e=>{console.error("Error getting totals:",e)}),fetchUsers()});const logoutLink=document.querySelector("#logout-link");async function signout(){try{await signOut(auth),sessionStorage.removeItem("keepLoggedIn"),sessionStorage.removeItem("user"),localStorage.removeItem("keepLoggedIn"),localStorage.removeItem("user"),window.location.href="index.html"}catch(e){console.error("Error signing out:",e.message)}}logoutLink.addEventListener("click",e=>{e.preventDefault(),signout()});const editForm=document.querySelector("#edit-form");let profileImage;function stateChange(){const e=email.value.trim().toLowerCase(),t=fname.value.trim().toLowerCase(),r=password.value.trim(),o=username.value.trim().toLowerCase();onAuthStateChanged(auth,async a=>{try{if(!a)return void signout();console.log(a),await updateEmail(a,e),await updatePassword(a,r),await updateProfile(a,{displayName:t});const s=doc(db,"UsersList",a.uid);if(await updateDoc(s,{email:e,fullName:t,username:o}),profileImage){const e=sRef(storage,`ProfileImages/${a.uid}`),t=await uploadBytes(e,profileImage),r=await getDownloadURL(t.ref);await updateDoc(s,{profilePicture:r})}console.log("User information updated successfully"),location.reload()}catch(e){console.error("Error:",e.message),(e.message="(auth/requires-recent-login).")&&(alert("Authentication Needed! Please Sign In Again."),signout())}})}profileImageInput.addEventListener("change",e=>{profileImage=e.target.files[0],e.preventDefault(),validation()?profileImage||photoError.classList.replace("invalid-feedback","d-block"):console.log("Validation failed. Cannot proceed.")}),editForm.addEventListener("submit",async e=>{e.preventDefault(),stateChange(),editForm.reset()});const authorName=document.querySelector("#authorName"),department=document.querySelector("#department"),title=document.querySelector("#title"),abstract=document.querySelector("#abstract"),thesisFile=document.querySelector("#thesisFile"),publicationDate=document.querySelector("#publicationDate"),supervisorName=document.querySelector("#supervisorName"),uploadProgress=document.querySelector("#upload-progress"),progressText=document.querySelector("#progress-text"),uploadForm=document.querySelector("#upload-form");async function sendThesisDetailsToFirestore(e){const t=authorName.value.trim(),r=department.value.trim(),o=title.value.trim(),a=abstract.value.trim(),s=publicationDate.value.trim(),n=supervisorName.value.trim();if(!(o&&t&&r&&a&&s&&n))return void console.error("ERROR: All fields are required.");const i={authorName:t,department:r,title:o,abstract:a,thesisURL:e,publicationDate:s,supervisorName:n};try{const e=doc(db,"ThesesList",o.toLowerCase());await setDoc(e,i),console.log("Upload Success!"),uploadForm.reset(),uploadProgress.value=0,progressText.innerHTML="0%"}catch(e){console.error("ERROR: Unable to upload thesis details.",e.message)}}function uploadThesisToStorage(){const e=title.value.trim(),t=authorName.value.trim(),r=supervisorName.value.trim(),o={contentType:"application/pdf",customMetadata:{author:t,createdAt:(new Date).toISOString(),description:e,uploadedBy:r}},a=sRef(storage,"ThesesFiles/"+e),s=uploadBytesResumable(a,thesisFile.files[0],o);s.on("state_changed",e=>{const t=e.bytesTransferred/e.totalBytes*100;uploadProgress.value=t.toFixed(0),progressText.innerHTML=t.toFixed(0)+"%"},e=>{console.log("ERROR: PDF not uploaded.",e)},()=>{getDownloadURL(s.snapshot.ref).then(e=>{sendThesisDetailsToFirestore(e)}).catch(e=>{console.error("Error getting download URL:",e)})})}uploadForm.addEventListener("submit",e=>{e.preventDefault(),uploadThesisToStorage()});const displayTotalUsers=document.querySelector("#total-users"),displayTotalTheses=document.querySelector("#total-theses");async function getTotals(){const e=collection(db,"UsersList"),t=collection(db,"ThesesList"),r=await getDocs(e),o=await getDocs(t);return{totalUsers:r.size,totalTheses:o.size}}const usersTableBody=document.querySelector("#users-table tbody");async function fetchUsers(){usersTableBody.innerHTML="";const e=collection(db,"UsersList"),t=await getDocs(e);let r=1;t.forEach(e=>{const t=e.data();if("Super Admin"===t.role)return;const o=e.id,a=document.createElement("tr");a.innerHTML=`\n      <td>${r}</td>\n      <td>${t.fullName.toUpperCase()}</td>\n      <td>${t.username}</td>\n      <td>\n        <select class="form-select" aria-label="Role" id="select-role">\n          <option selected>${t.role}</option>\n          <option>User</option>\n          <option>Admin</option>\n          <option>Super Admin</option>\n        </select>\n      </td>\n      <td>\n        <button type="button" class="btn btn-primary update-role-button" data-user-id="${o}">\n          <i class="fa-solid fa-pen-to-square mr-1"></i>\n          Update Role\n        </button>\n      </td>\n    `,usersTableBody.appendChild(a),r++})}const searchUser=document.querySelector("#search-user"),searchUserForm=document.querySelector("#search-user-form");function filterTable(e){const t=document.querySelector(".table").querySelectorAll("tbody tr");e=e.toLowerCase(),t.forEach(t=>{const r=t.querySelector("td:nth-child(2)"),o=t.querySelector("td:nth-child(3)"),a=r.textContent.toLowerCase(),s=o.textContent.toLowerCase();a.includes(e)||s.includes(e)?t.style.display="":t.style.display="none"})}searchUser.addEventListener("input",e=>{filterTable(e.target.value)}),searchUserForm.addEventListener("submit",e=>{e.preventDefault(),filterTable(searchUser.value)});const usersTable=document.querySelector("#users-table");async function updateUserRole(e,t){const r=doc(db,"UsersList",e);await updateDoc(r,{role:t})}usersTable.addEventListener("click",async e=>{if(e.target.classList.contains("update-role-button")){const t=e.target.getAttribute("data-user-id"),r=e.target.parentElement.parentElement.querySelector("#select-role").value;await updateUserRole(t,r),fetchUsers()}});